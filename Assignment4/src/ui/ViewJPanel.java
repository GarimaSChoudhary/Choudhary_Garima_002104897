/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.House;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author choud
 */
public class ViewJPanel extends javax.swing.JPanel {
    PersonDirectory pd;
    private int selectedRow;
    private String gender;
    int count = 2000;
    /**
     * Creates new form ViewJPanel
     */
    public ViewJPanel(PersonDirectory pd) {
        initComponents();
        this.pd = pd;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        lblViewTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCar = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        lblCount = new javax.swing.JLabel();
        btnImport = new javax.swing.JButton();
        btnNA = new javax.swing.JRadioButton();
        txthouseno = new javax.swing.JTextField();
        lblStreet = new javax.swing.JLabel();
        txtcity = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        txtZipcode = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtModelName = new javax.swing.JTextField();
        lblzipcode = new javax.swing.JLabel();
        lblgender = new javax.swing.JLabel();
        txtStreetname = new javax.swing.JTextField();
        txtManufacture = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        btnOther = new javax.swing.JRadioButton();
        lblcommunity = new javax.swing.JLabel();
        lblcontact = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        btnAvailable = new javax.swing.JRadioButton();
        lblhouse = new javax.swing.JLabel();
        dropdownComm = new javax.swing.JComboBox<>();
        lblno = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnView.setText("View ");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        lblViewTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblViewTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblViewTitle.setText("Person Details");

        jScrollPane1.setAutoscrolls(true);

        tableCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Contact Number", "Gender", "HouseNo", "Street Name", "Community", "City", "ZipCode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCar.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableCar);

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblCount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCount.setText("Total Rows:");

        btnImport.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnNA.setText("Female");
        btnNA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNAActionPerformed(evt);
            }
        });

        txthouseno.setToolTipText("Add digits only between 2-9");
        txthouseno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txthousenoKeyReleased(evt);
            }
        });

        lblStreet.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStreet.setText("Street Name:");

        txtContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtContactKeyReleased(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCity.setText("City:");

        lblzipcode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblzipcode.setText("Zip Code:");

        lblgender.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblgender.setText("Gender:");

        txtManufacture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufactureActionPerformed(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName.setText("Name:");

        btnOther.setText("Other");
        btnOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtherActionPerformed(evt);
            }
        });

        lblcommunity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblcommunity.setText("Community:");

        lblcontact.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblcontact.setText("Contact Number:");

        lblAge.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAge.setText("Age:");

        btnAvailable.setText("Male");
        btnAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailableActionPerformed(evt);
            }
        });

        lblhouse.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblhouse.setText("House Number:");

        dropdownComm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "South Boston", "Downtown" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(353, 353, 353)
                            .addComponent(lblViewTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(205, 205, 205)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblCity)
                                .addComponent(lblcontact)
                                .addComponent(lblAge)
                                .addComponent(lblName)
                                .addComponent(lblgender)
                                .addComponent(lblhouse)
                                .addComponent(lblcommunity)
                                .addComponent(lblStreet)
                                .addComponent(lblzipcode))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnSave)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtContact, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtModelName, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(txtManufacture, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(btnNA, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(btnOther, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(txthouseno, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(txtStreetname, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(txtcity, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(txtZipcode, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(dropdownComm, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnImport)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnView)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)))
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblViewTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblno, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(lblCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnImport))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtManufacture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblcontact, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContact, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblgender, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAvailable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOther)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txthouseno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStreetname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblcommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropdownComm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblzipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZipcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
//        // TODO add your handling code here:
        selectedRow = tableCar.getSelectedRow();
//
        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a row to update");
            return;
        }
        txtContact.setEditable(true);
        txtManufacture.setEditable(true);
        txtModelName.setEditable(true);
        txtStreetname.setEditable(true);
        txtZipcode.setEditable(false);
        txthouseno.setEditable(true);
        txtcity.setEditable(false);
        btnAvailable.setEnabled(true);
        btnNA.setEnabled(true);
        btnOther.setEnabled(true);
        txthouseno.setEditable(true);
        
        DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
        Person selectedCar = (Person) model.getValueAt(selectedRow, 0);
dropdownComm.setSelectedItem(selectedCar.getCommunity().getCommunityName());
        //txtCommunity.setText(selectedCar.getCommunity().getCommunityName());
        txtContact.setText(String.valueOf(selectedCar.getContactNo()));
        txtManufacture.setText(selectedCar.getName());
        txtModelName.setText(String.valueOf(selectedCar.getAge()));
        txtStreetname.setText(selectedCar.getHouse().getStreetName());
        txtZipcode.setText(String.valueOf(selectedCar.getHouse().getZipcode()));
        txtcity.setText(selectedCar.getCity().getCityName());
        txthouseno.setText(String.valueOf(selectedCar.getHouse().getHouseNo()));
        if(selectedCar.getGender().equalsIgnoreCase("male")){
            btnAvailable.setSelected(true);
            btnNA.setSelected(false);
            btnOther.setSelected(false);
        }
        if(selectedCar.getGender().equalsIgnoreCase("female")){
            btnAvailable.setSelected(false);
            btnNA.setSelected(true);
            btnOther.setSelected(false);
        }
        if(selectedCar.getGender().equalsIgnoreCase("other")){
            btnAvailable.setSelected(false);
            btnNA.setSelected(false);
            btnOther.setSelected(true);
        }
//        txtCity.setText(selectedCar.getCarCity());
//        txtExpiration.setText(selectedCar.getCarMaintainenceCertificate());
//        txtManufacture.setText(selectedCar.getCarManufacturer());
//        txtManufactureYear.setText(String.valueOf(selectedCar.getCarManufacturerYear()));
//        txtModelName.setText(selectedCar.getCarModel());
//        txtSeats.setText(String.valueOf(selectedCar.getNoOfSeats()));
//        txtSerialNo.setText(selectedCar.getCarLicenceNo());
//        if(selectedCar.isIsAvailable() == true){
//            btnAvailable.setSelected(true);
//            btnNA.setSelected(false);
//        }
//        else{
//            btnNA.setSelected(true);
//            btnAvailable.setSelected(false);
//        }
//
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
  //      try {
//            // TODO add your handling code here:
            selectedRow = tableCar.getSelectedRow();
//
            if(selectedRow<0){
                JOptionPane.showMessageDialog(this, "Please select a row to delete");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
            Person selectedCar = (Person) model.getValueAt(selectedRow, 0);

            pd.deleteCar(selectedCar);
            JOptionPane.showMessageDialog(this, "Deleted the person successfully");

            populateTable();
//
            txtManufacture.setText("");
            txtModelName.setText("");
            txtContact.setText("");
            txtStreetname.setText("");
            txtZipcode.setText("");
            txtcity.setText("");
            btnAvailable.setSelected(false);
            btnNA.setSelected(false);
            btnOther.setSelected(false);
            txthouseno.setText("");
//
//        } catch (ParseException ex) {
//            Logger.getLogger(ViewJPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
//        // TODO add your handling code here:
//        //making fields non-editable
        //txtCommunity.setEditable(false);
        txtContact.setEditable(false);
        txtManufacture.setEditable(false);
        txtModelName.setEditable(false);
        txtStreetname.setEditable(false);
        txtZipcode.setEditable(false);
        txtcity.setEditable(false);
        btnAvailable.setEnabled(false);
        txthouseno.setEditable(false);
        btnNA.setEnabled(false);
        btnOther.setEnabled(false);
        selectedRow = tableCar.getSelectedRow();
        
        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }   
        DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
        Person selectedCar = (Person) model.getValueAt(selectedRow, 0);
        dropdownComm.setSelectedItem(selectedCar.getCommunity().getCommunityName());
        //txtCommunity.setText(selectedCar.getCommunity().getCommunityName());
        txtContact.setText(String.valueOf(selectedCar.getContactNo()));
        txtManufacture.setText(selectedCar.getName());
        txtModelName.setText(String.valueOf(selectedCar.getAge()));
        txtStreetname.setText(selectedCar.getHouse().getStreetName());
        txtZipcode.setText(String.valueOf(selectedCar.getHouse().getZipcode()));
        txtcity.setText(selectedCar.getCity().getCityName());
        txthouseno.setText(String.valueOf(selectedCar.getHouse().getHouseNo()));
        if(selectedCar.getGender().equalsIgnoreCase("male")){
            btnAvailable.setSelected(true);
            btnNA.setEnabled(false);
            btnOther.setEnabled(false);
        }
        if(selectedCar.getGender().equalsIgnoreCase("female")){
            btnAvailable.setEnabled(false);
            btnNA.setSelected(true);
            btnOther.setEnabled(false);
        }
        if(selectedCar.getGender().equalsIgnoreCase("other")){
            btnAvailable.setEnabled(false);
            btnNA.setEnabled(false);
            btnOther.setSelected(true);
        }
    
//        txtCity.setText(selectedCar.getCarCity());
//        txtExpiration.setText(selectedCar.getCarMaintainenceCertificate());
//        txtManufacture.setText(selectedCar.getCarManufacturer());
//        txtManufactureYear.setText(String.valueOf(selectedCar.getCarManufacturerYear()));
//        txtModelName.setText(selectedCar.getCarModel());
//        txtSeats.setText(String.valueOf(selectedCar.getNoOfSeats()));
//        txtSerialNo.setText(selectedCar.getCarLicenceNo());
//        lblUpdatedTime.setText(listOfCars.getUpdatedTime());
//        if(selectedCar.isIsAvailable() == true){
//            btnAvailable.setSelected(true);
//            btnNA.setSelected(false);
//        }
//        else{
//            btnNA.setSelected(true);
//            btnAvailable.setSelected(false);
//        }
//        btnSave.setEnabled(false);
//
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
//        try {
//            // TODO add your handling code here:
//            if(txtManufacture.getText().length() > 0 && txtModelName.getText().length() > 0 &&
//                txtSerialNo.getText().length() > 0 && txtManufactureYear.getText().length() > 0 &&
//                txtSeats.getText().length() > 0 && txtCity.getText().length() > 0 &&
//                txtExpiration.getText().length() > 0){
                selectedRow = tableCar.getSelectedRow();
//

                DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
                Person selectedCar = (Person) model.getValueAt(selectedRow, 0);
                String community =  dropdownComm.getSelectedItem().toString();
                String name = txtManufacture.getText();
                int age = Integer.valueOf(txtModelName.getText());
                long contact = Long.valueOf(txtContact.getText());
                String city = txtcity.getText();
                long zipcode = Long.valueOf(txtZipcode.getText());
                int houseno = Integer.valueOf(txthouseno.getText());
                String street = txtStreetname.getText();
               if(btnOther.isSelected()){
            btnAvailable.setSelected(false);
           btnNA.setSelected(false);
           gender ="Other";
        }
               
                if(btnNA.isSelected()){
            btnOther.setSelected(false);
           btnAvailable.setSelected(false);
           gender ="Female";
        }
                selectedCar.setAge(age);
                selectedCar.setGender(gender);
                selectedCar.setContactNo(contact);
                selectedCar.setName(name);
                House h = new House();
                h.setHouseNo(houseno);
                h.setStreetName(street);
                h.setZipcode(zipcode);
                selectedCar.setHouse(h);
                City c = new City();
                c.setCityName(city);
                selectedCar.setCity(c);
                Community co = new Community();
                co.setCommunityName(community);
                selectedCar.setCommunity(co);
                
                      JOptionPane.showMessageDialog(this, "Details updated!");
               
                      populateTable();
//                SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
//                String manufacturer = txtManufacture.getText();
//                String modelName = txtModelName.getText();
//                String serialNo = txtSerialNo.getText();
//                int manufactureYear = Integer.parseInt(txtManufactureYear.getText());
//                int seats = Integer.parseInt(txtSeats.getText());
//                String city = txtCity.getText();
//                boolean status = isAvailable;
//                String expirationDate = txtExpiration.getText();
//
//                selectedCar.setCarManufacturer(manufacturer);
//                selectedCar.setCarModel(modelName);
//                selectedCar.setCarLicenceNo(serialNo);
//                selectedCar.setCarManufacturerYear(manufactureYear);
//                selectedCar.setNoOfSeats(seats);
//                selectedCar.setCarCity(city);
//                selectedCar.setIsAvailable(status);
//                selectedCar.setCarMaintainenceCertificate(expirationDate);
//
//                JOptionPane.showMessageDialog(this, "Car updated!");
//                Date date = new Date();
//                listOfCars.setUpdatedTime(format.format(date));
//
//                populateTable();
//
//            }
//            else{
//                JOptionPane.showMessageDialog(this, "Please Update with appropriate details");
//            }
//        } catch (ParseException ex) {
//            Logger.getLogger(ViewJPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
//        try {
            // TODO add your handling code here:
//
//            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
//            Date date = new Date();
//            listOfCars.setUpdatedTime(format.format(date));
//            //            DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
//            //            model.setRowCount(0);
            readCSVFile();
            populateTable();
//            lblUpdatedTime.setText(listOfCars.getUpdatedTime());
//
//        } catch (ParseException ex) {
//            Logger.getLogger(ViewJPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnNAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNAActionPerformed
        // TODO add your handling code here:
        //        if(btnNA.isSelected() == true){
            //            btnAvailable.setSelected(false);
            //            isAvailable = false;
            //        }
            if(btnNA.isSelected()){
            btnOther.setSelected(false);
           btnAvailable.setSelected(false);
           gender ="Female";
        }
    }//GEN-LAST:event_btnNAActionPerformed

    private void txthousenoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txthousenoKeyReleased
        // TODO add your handling code here:
        //        String regex = "^[2-9]{1}$";
        //        Pattern pattern= Pattern.compile(regex);
        //        Matcher match=pattern.matcher(txtSeats.getText());
        //
        //        if(txtSeats.getText().length()<=0 || txtSeats.getText().length()>10 || !match.matches()){
            //            lblSeatsError.setText("Please enter total no of seats, between 2-9");
            //            seatsFlag = false;
            //        }
        //        else {
            //            lblSeatsError.setText(null);
            //            seatsFlag = true;
            //        }
    }//GEN-LAST:event_txthousenoKeyReleased

    private void txtContactKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactKeyReleased
        // TODO add your handling code here:
        //        for(Car c : listOfCars.getListOfCars()){
            //           listOfCars.getListOfCars().contains(c)
            //        }
    }//GEN-LAST:event_txtContactKeyReleased

    private void txtManufactureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufactureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufactureActionPerformed

    private void btnOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtherActionPerformed
        // TODO add your handling code here:
        if(btnOther.isSelected()){
            btnAvailable.setSelected(false);
           btnNA.setSelected(false);
           gender ="Other";
        }
    }//GEN-LAST:event_btnOtherActionPerformed

    private void btnAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailableActionPerformed
        //        // TODO add your handling code here:
        //        if(btnAvailable.isSelected() == true){
            //            btnNA.setSelected(false);
            //            isAvailable = true;
            //        }
            if(btnAvailable.isSelected()){
            btnOther.setSelected(false);
           btnNA.setSelected(false);
           gender ="Male";
        }
    }//GEN-LAST:event_btnAvailableActionPerformed
private void populateTable(){
    DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
        model.setRowCount(0);
        int i = 0, total = 0;
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
        Date currentDatenow = new Date();
        String currentFormattedDate = format.format(currentDatenow);
        
        for(Person c : pd.getPeople()){
            Object[] o = new Object[10];
            
            o[i++] = c;
            o[i++] = c.getName();
            o[i++] = c.getAge();
            o[i++] = c.getContactNo();
            o[i++] = c.getGender();
            o[i++] = c.getHouse().getHouseNo();
            o[i++] = c.getHouse().getStreetName();
            o[i++] = c.getCommunity().getCommunityName();
            o[i++] = c.getCity().getCityName();
            o[i++] = c.getHouse().getZipcode();
            i=0;
            total++;
            model.addRow(o);
        }
//            Date expiredDate = format.parse(c.getCarMaintainenceCertificate());
//            Date currentDate = format.parse(currentFormattedDate);
//            
//            if(expiredDate.after(currentDate)){
//                o[i++] = "Not Expired";
//            }
//            else{
//                o[i++] = "Expired";
//            }
//            if(c.isIsAvailable() == true){
//                 o[i++] = "Available";
//            }
//            else{
//            o[i++] = "Unavailable";
//            }
//            i=0;
//            count++;
//            model.addRow(o);
//        } 
        lblno.setText(String.valueOf(total));
//        lblUpdatedTime.setText(listOfCars.getUpdatedTime());
//    
}
private void readCSVFile() {
        BufferedReader br = null;
        try {
            //boolean flag = true;
            String line = "";
            String splitBy = ",";
            br = new BufferedReader(new FileReader("C:\\Users\\choud\\Desktop\\100 Records_new (1).csv"));
            while ((line = br.readLine()) != null) //returns a Boolean value
            {
                String[] car = line.split(splitBy); // use comma as separator

                String serialNo = car[0];
                String contact = car[2];
                String age = car[1];
                String manfacturingYear = car[3];
                String houseno = car[4];
                String stname = car[5];
                String community = car[6];
                String city = car[7];
                String zipcode = car[8];
               
                Person c = pd.addNewCar(count++);//new Car();
               
                c.setName(serialNo);
                c.setContactNo(Long.valueOf(contact));
                c.setAge(Integer.valueOf(age));
                c.setGender(manfacturingYear);
                House h = new House();
                h.setHouseNo(Integer.valueOf(houseno));
                h.setStreetName(stname);
                h.setZipcode(Long.valueOf(zipcode));
                c.setHouse(h);
                Community co = new Community();
                co.setCommunityName(community);
                c.setCommunity(co);
                City cit = new City();
                cit.setCityName(city);
                c.setCity(cit);
                
            }   } catch (FileNotFoundException ex) {
            Logger.getLogger(ViewJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ViewJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(ViewJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnAvailable;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnImport;
    private javax.swing.JRadioButton btnNA;
    private javax.swing.JRadioButton btnOther;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> dropdownComm;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStreet;
    private javax.swing.JLabel lblViewTitle;
    private javax.swing.JLabel lblcommunity;
    private javax.swing.JLabel lblcontact;
    private javax.swing.JLabel lblgender;
    private javax.swing.JLabel lblhouse;
    private javax.swing.JLabel lblno;
    private javax.swing.JLabel lblzipcode;
    private javax.swing.JTable tableCar;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtManufacture;
    private javax.swing.JTextField txtModelName;
    private javax.swing.JTextField txtStreetname;
    private javax.swing.JTextField txtZipcode;
    private javax.swing.JTextField txtcity;
    private javax.swing.JTextField txthouseno;
    // End of variables declaration//GEN-END:variables
}
