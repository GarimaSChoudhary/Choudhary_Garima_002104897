/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.nio.charset.Charset;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.CarList;

/**
 *
 * @author choud
 */
public class SearchJPanel extends javax.swing.JPanel {

    CarList listOfCars;
    private Date expiredDate;
    private Date currentDate;

    /**
     * Creates new form SearchJPanel
     */
    public SearchJPanel(CarList listOfCars) {
        initComponents();
        this.listOfCars = listOfCars;
        countAvailableCars(this.listOfCars);
        //searchData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableCar = new javax.swing.JTable();
        lblCount = new javax.swing.JLabel();
        lblCreateTitle = new javax.swing.JLabel();
        btnFirstAvailableCar = new javax.swing.JButton();
        lblAvailableCount = new javax.swing.JLabel();
        lblUnavailableCount = new javax.swing.JLabel();
        lblManufactureName = new javax.swing.JLabel();
        lblMYear = new javax.swing.JLabel();
        lblSerialNo = new javax.swing.JLabel();
        lblModelName = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtManuName = new javax.swing.JTextField();
        txtManuYear = new javax.swing.JTextField();
        txtSerialName = new javax.swing.JTextField();
        txtModelName = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        btnExpiredCertificate = new javax.swing.JButton();
        jScrollBar1 = new javax.swing.JScrollBar();
        lblRowCountText = new javax.swing.JLabel();
        lblAvailableText = new javax.swing.JLabel();
        lblUnavailableTxt = new javax.swing.JLabel();
        lblMinSeats = new javax.swing.JLabel();
        lblMaxSeats = new javax.swing.JLabel();
        txtMinSeats = new javax.swing.JTextField();
        txtMaxSeats = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));

        jScrollPane1.setAutoscrolls(true);

        tableCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial Number", "Manufacturer", "Model ", "Manufacturer Year", "City", "Seats", "Maintainence Certificate Expired?", "Availabliity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCar.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableCar);

        lblCount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCount.setText("Total Rows:");

        lblCreateTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCreateTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreateTitle.setText("Search for Car");

        btnFirstAvailableCar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnFirstAvailableCar.setText("First Available Car");
        btnFirstAvailableCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailableCarActionPerformed(evt);
            }
        });

        lblManufactureName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblManufactureName.setText("Manufacturer Name:");

        lblMYear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMYear.setText("Manufacturer Year:");

        lblSerialNo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSerialNo.setText("Serial Number:");

        lblModelName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblModelName.setText("Model Name:");

        lblCity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCity.setText("City:");

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Search Data");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtManuName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManuNameActionPerformed(evt);
            }
        });

        txtManuYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManuYearActionPerformed(evt);
            }
        });

        txtSerialName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNameActionPerformed(evt);
            }
        });

        txtModelName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNameActionPerformed(evt);
            }
        });

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        btnExpiredCertificate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExpiredCertificate.setText("Car with expired maintenance certificate ");
        btnExpiredCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiredCertificateActionPerformed(evt);
            }
        });

        lblRowCountText.setText("0");
        lblRowCountText.setToolTipText("");

        lblAvailableText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAvailableText.setText("Cars Available:");

        lblUnavailableTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUnavailableTxt.setText("Cars Unavailable:");

        lblMinSeats.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMinSeats.setText("Min Seats:");

        lblMaxSeats.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMaxSeats.setText("Max Seats:");

        txtMinSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinSeatsActionPerformed(evt);
            }
        });

        txtMaxSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxSeatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblManufactureName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMYear)
                            .addComponent(lblSerialNo)
                            .addComponent(lblCity)
                            .addComponent(lblModelName)
                            .addComponent(lblMinSeats)
                            .addComponent(lblMaxSeats))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtManuName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtManuYear, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSerialName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtModelName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFirstAvailableCar)
                            .addComponent(btnExpiredCertificate))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(239, 239, 239)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSearch)
                                    .addComponent(lblCreateTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblUnavailableTxt)
                                    .addComponent(lblAvailableText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblAvailableCount, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                    .addComponent(lblUnavailableCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblRowCountText, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCreateTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblManufactureName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtManuName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFirstAvailableCar))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMYear, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtManuYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSerialName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnExpiredCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addGap(125, 125, 125)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRowCountText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAvailableText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblUnavailableTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(lblUnavailableCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblAvailableCount, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
            .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFirstAvailableCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailableCarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
        model.setRowCount(0);
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
        Date currentDatenow = new Date();
        String currentFormattedDate = format.format(currentDatenow);
        int i = 0;
        try {
            for (int j = 0; j < listOfCars.getListOfCars().size(); j++) {
                Car car = listOfCars.getListOfCars().get(j);

                if (!car.isIsAvailable()) {
                    j++;
                } else {

                    Object[] o = new Object[8];

                    o[i++] = car;
                    o[i++] = car.getCarManufacturer();
                    o[i++] = car.getCarModel();
                    o[i++] = car.getCarManufacturerYear();
                    o[i++] = car.getCarCity();
                    o[i++] = car.getNoOfSeats();
                    //String expiredDate = car.getCarMaintainenceCertificate();
                    expiredDate = format.parse(car.getCarMaintainenceCertificate());
                    currentDate = format.parse(currentFormattedDate);

                    if (expiredDate.after(currentDate)) {
                        o[i++] = "Not Expired";
                    } else {
                        o[i++] = "Expired";
                    }
                    if (car.isIsAvailable() == true) {
                        o[i++] = "Available";
                    } else {
                        o[i++] = "Unavailable";
                    }
                    model.addRow(o);
                    break;
                }
            }
            int count = 1;
            lblRowCountText.setText(String.valueOf(count));

        } catch (ParseException ex) {
            Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnFirstAvailableCarActionPerformed

    private void txtManuNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManuNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManuNameActionPerformed

    private void txtManuYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManuYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManuYearActionPerformed

    private void txtSerialNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerialNameActionPerformed

    private void txtModelNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNameActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void btnExpiredCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiredCertificateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
        model.setRowCount(0);
        int i = 0;
        int count = 0;
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
        Date currentDatenow = new Date();
        String currentFormattedDate = format.format(currentDatenow);

        // for(int j=0; j<listOfCars.getListOfCars().size(); j++){
        try {
            for (Car c : listOfCars.getListOfCars()) {
                // Car car = listOfCars.getListOfCars().get(j);
                expiredDate = format.parse(c.getCarMaintainenceCertificate());
                currentDate = format.parse(currentFormattedDate);
                if (!expiredDate.after(currentDate)) {

                    Object[] o = new Object[8];

                    o[i++] = c;
                    o[i++] = c.getCarManufacturer();
                    o[i++] = c.getCarModel();
                    o[i++] = c.getCarManufacturerYear();
                    o[i++] = c.getCarCity();
                    o[i++] = c.getNoOfSeats();

//                     Date expiredDate = format.parse(c.getCarMaintainenceCertificate());
//                     Date currentDate = format.parse(currentFormattedDate);
//                     
                    if (expiredDate.after(currentDate)) {
                        o[i++] = "Not Expired";
                    } else {
                        o[i++] = "Expired";
                    }
                    if (c.isIsAvailable() == true) {
                        o[i++] = "Available";
                    } else {
                        o[i++] = "Unavailable";
                    }
                    i = 0;
                    count++;
                    model.addRow(o);
                }
            }
            lblRowCountText.setText(String.valueOf(count));
        } catch (ParseException ex) {
            Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExpiredCertificateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> filteredData = new  ArrayList<>();
        int i = 0, count = 0;
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
        Date currentDatenow = new Date();
        String currentFormattedDate = format.format(currentDatenow);

        DefaultTableModel model = (DefaultTableModel) tableCar.getModel();
        model.setRowCount(0);
        String manufacturerName = txtManuName.getText();
        String manufacturerYear = txtManuYear.getText();
        String serialNo = txtSerialName.getText();
        String modelName = txtModelName.getText();
        String city = txtCity.getText();
        String maxSeats = txtMaxSeats.getText();
        String minSeats = txtMinSeats.getText();
        
        filteredData = filterByManufactureName(filteredData, manufacturerName);
        filteredData = filterByManufactureYear(filteredData, manufacturerYear);
        filteredData = filterBySerialNo(filteredData, serialNo);
        filteredData = filterByModelName(filteredData, modelName);
        filteredData = filterByCity(filteredData, city);
       if(!maxSeats.isEmpty() || !minSeats.isEmpty()){
        filteredData = filterBySeats(filteredData, maxSeats, minSeats);
       }
        for (Car car2 : filteredData) {
            try {

                Object[] o = new Object[8];
                System.out.println(car2.toString());
                o[i++] = car2;
                o[i++] = car2.getCarManufacturer();
                o[i++] = car2.getCarModel();
                o[i++] = car2.getCarManufacturerYear();
                o[i++] = car2.getCarCity();
                o[i++] = car2.getNoOfSeats();
                // expiredDate = format.parse(car2.getCarMaintainenceCertificate());
                currentDate = format.parse(currentFormattedDate);
                 
                i = 0;
                count++;
                model.addRow(o);

            } catch (ParseException ex) {
                Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            lblRowCountText.setText(String.valueOf(count));
            txtManuName.setText("");
            txtCity.setText("");
            txtManuYear.setText("");
            txtMaxSeats.setText("");
            txtMinSeats.setText("");
            txtModelName.setText("");
            txtSerialName.setText("");
            
        }


    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtMinSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinSeatsActionPerformed

    private void txtMaxSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxSeatsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExpiredCertificate;
    private javax.swing.JButton btnFirstAvailableCar;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvailableCount;
    private javax.swing.JLabel lblAvailableText;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblCreateTitle;
    private javax.swing.JLabel lblMYear;
    private javax.swing.JLabel lblManufactureName;
    private javax.swing.JLabel lblMaxSeats;
    private javax.swing.JLabel lblMinSeats;
    private javax.swing.JLabel lblModelName;
    private javax.swing.JLabel lblRowCountText;
    private javax.swing.JLabel lblSerialNo;
    private javax.swing.JLabel lblUnavailableCount;
    private javax.swing.JLabel lblUnavailableTxt;
    private javax.swing.JTable tableCar;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtManuName;
    private javax.swing.JTextField txtManuYear;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtMinSeats;
    private javax.swing.JTextField txtModelName;
    private javax.swing.JTextField txtSerialName;
    // End of variables declaration//GEN-END:variables

    private void countAvailableCars(CarList listOfCars) {
        int availableCount = 0, unAvailableCount = 0;
        for (Car car : listOfCars.getListOfCars()) {
            Boolean status = car.isIsAvailable();
            if (status == true) {
                availableCount++;
            } else {
                unAvailableCount++;
            }
        }
        lblAvailableCount.setText(String.valueOf(availableCount));
        lblUnavailableCount.setText(String.valueOf(unAvailableCount));
    }

    private ArrayList<Car> filterByManufactureName(ArrayList<Car> filteredData, String manufacturerName) {
        // String manufacturerName = txtManuName.getText();
        // ArrayList<Car> filteredData = new ArrayList<Car>();
        for (Car car : listOfCars.getListOfCars()) {
            if (!manufacturerName.equals("")) {
                System.out.println("in for loop");
                if (manufacturerName.equalsIgnoreCase(car.getCarManufacturer())) {
                    // matchFound++;
                    filteredData.add(car);
                    System.out.println("matchFound");
                }
            }
        }
        return filteredData;
    }

    private ArrayList<Car> filterByManufactureYear(ArrayList<Car> filteredData, String manufacturerYear) {
        // String manufacturerYear = txtManuYear.getText();
       // ArrayList<Car> filter = new ArrayList<Car>();
        if (filteredData.size() > 0 && !filteredData.isEmpty()) {
            for (Car car : filteredData) {

                if (!manufacturerYear.equals("") && !manufacturerYear.isEmpty()) {
                    if (manufacturerYear.equalsIgnoreCase(String.valueOf(car.getCarManufacturerYear()))) {
                        //matchFound++;
                       // System.out.println("------");
                        filteredData.add(car);
                      
                    }
                }
               // return filteredData;
            }
        } else {
            for (Car car1 : listOfCars.getListOfCars()) {
                
                if (!manufacturerYear.isEmpty()) {
                    
                    if (manufacturerYear.equalsIgnoreCase(String.valueOf(car1.getCarManufacturerYear()))) {
                                // if (manufacturerYear.equals("")) {
       //matchFound++;
                        System.out.println("ture");
                        filteredData.add(car1);

                    }
                }
            }
        }
        return filteredData;
    }

    private ArrayList<Car> filterBySerialNo(ArrayList<Car> filteredData, String serialNo) {
        // String manufacturerYear = txtManuYear.getText();
        //ArrayList<Car> filteredData = new ArrayList<Car>();
        if (filteredData.size() > 0) {
            for (Car car : filteredData) {

                if (!serialNo.equals("")) {
                    if (serialNo.equalsIgnoreCase(car.getCarLicenceNo())) {
                        //matchFound++;
                        filteredData.add(car);
                    }
                }
            }
        } else {
            for (Car car1 : listOfCars.getListOfCars()) {

                if (!serialNo.equals("")) {
                    if (serialNo.equalsIgnoreCase(car1.getCarLicenceNo())) {
                        //matchFound++;
                        filteredData.add(car1);

                    }
                }
            }
        }
        return filteredData;
    }

    private ArrayList<Car> filterByModelName(ArrayList<Car> filteredData, String modelName) {
        if (filteredData.size() > 0) {
            for (Car car : filteredData) {

                if (!modelName.equals("")) {
                    if (modelName.equalsIgnoreCase(car.getCarModel())) {
                        //matchFound++;
                        filteredData.add(car);
                    }
                }
            }
        } else {
            for (Car car1 : listOfCars.getListOfCars()) {

                if (!modelName.equals("")) {
                    if (modelName.equalsIgnoreCase(car1.getCarModel())) {
                        //matchFound++;
                        filteredData.add(car1);

                    }
                }
            }
        }
        return filteredData;
    }

    private ArrayList<Car> filterByCity(ArrayList<Car> filteredData, String city) {
        if (filteredData.size() > 0) {
            for (Car car : filteredData) {

                if (!city.equals("")) {
                    if (city.equalsIgnoreCase(car.getCarCity())) {
                           if(car.isIsAvailable()){
                        filteredData.add(car);
                           }
                    }
                }
            }
        } else {
            for (Car car1 : listOfCars.getListOfCars()) {

                if (!city.equals("")) {
                    if (city.equalsIgnoreCase(car1.getCarCity())) {
                        //matchFound++;
                        if(car1.isIsAvailable()){
                            filteredData.add(car1);
                        }
                    }
                }
            }
        }
        return filteredData;
    }

    private ArrayList<Car> filterBySeats(ArrayList<Car> filteredData, String maxSeats, String minSeats) {
         if(minSeats.isEmpty()){
                        JOptionPane.showMessageDialog(this, "Please enter min Seats");
                    }
                   if(maxSeats.isEmpty()){
                        JOptionPane.showMessageDialog(this, "Please enter max Seats");

                    }       
     if (filteredData.size() > 0) {
            for (Car car : filteredData) {
                
                if(!minSeats.isEmpty() || !maxSeats.isEmpty()){
                    if(car.getNoOfSeats()>= Integer.parseInt(minSeats)
                            && car.getNoOfSeats()<= Integer.parseInt(maxSeats)){
//                
                        filteredData.add(car);
                    }
                }
                
            }
        } else {
            for (Car car1 : listOfCars.getListOfCars()) {

                if(!minSeats.isEmpty() && !maxSeats.isEmpty()){
                    if(car1.getNoOfSeats()>= Integer.parseInt(minSeats)
                            && car1.getNoOfSeats()<= Integer.parseInt(maxSeats)){
      //matchFound++;
                        filteredData.add(car1);

                    }
                }
            }
        }
        return filteredData;
    }

    
}
